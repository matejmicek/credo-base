// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  portfolioCompanies PortfolioCompany[]
  deals             Deal[]
  activities        Activity[]
  
  @@map("users")
}

// Portfolio Companies
model PortfolioCompany {
  id              String   @id @default(cuid())
  name            String
  description     String?
  website         String?
  stage           String   // seed, series-a, series-b, etc.
  sector          String?
  country         String?
  foundedYear     Int?
  investmentDate  DateTime?
  investmentAmount Float?
  valuation       Float?
  status          String   @default("active") // active, exited, closed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  createdBy       User     @relation(fields: [createdById], references: [id])
  createdById     String
  
  @@map("portfolio_companies")
}

// Deal Pipeline
model Deal {
  id              String   @id @default(cuid())
  companyName     String
  description     String?
  stage           String   // sourced, initial-meeting, due-diligence, ic-review, term-sheet, closed, passed
  sector          String?
  requestedAmount Float?
  valuation       Float?
  leadInvestor    String?
  priority        String   @default("medium") // low, medium, high
  nextAction      String?
  nextActionDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  assignedTo      User     @relation(fields: [assignedToId], references: [id])
  assignedToId    String
  
  @@map("deals")
}

// Activity log for tracking actions across tools
model Activity {
  id          String   @id @default(cuid())
  type        String   // deal_created, company_updated, meeting_scheduled, etc.
  description String
  entityType  String?  // deal, portfolio_company, etc.
  entityId    String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  @@map("activities")
}
